RULES
Invalid input: constraints: 1 <= n <= 100
Rule 1: if n is odd print Weird
Rule 2: if n is even and in the inlcusive range of 2 to 5 print Not Weird
Rule 3: if n is even and in the inclusive range of 6 to 20 print Weird
Rule 4: if n is even and greater than 20 print Not Weird

STEPS
1.Create rule for invalid input: constraints - DONE
2.Create function for rule 1 - DONE
3.Create function for rule 2 - DONE
4.Create function for rule 3 - DONE
5.Create function for rule 4 - DONE
6.Go over probelm spec and intended output. - DONE: Refer to notes 180321.
7.Assess if I can combine rules to get single outputs. DONE.
8.Draw diagram. NOT STARTED.
9.Combine functions into one function. DONE.
10.Test in HackerRank editor. UP TO HERE | IN PROGRESS.

NOTES
210321: Investigate further Monday-Tuesday. If I can't work out, ask Kavita or group.
210321: My thinking is wrong for the notes dates 210321 (excpet the first one) below. 24 should be Not Weird based on rule 4 24 is greater than 20 and won't be in range 6 to 20.
210321: WRONG - There is a conflict with rules 3 and 4. Rule 4 will give output of Not Weird if the number is greater than 20 and is even which is the case for 24. Rule 4 overrides rule 3.
210321: WRONG - So in[24]: Not Weird is incorrect based on rule 3. Need to modify.
210321: WRONG - Rule 3 means that 24 (which is even) the output should be Weird.
210321: WRONG - Reviewed rules again. Rule 3 says "if n is enen and in inclusive range of 6 to 20 print Weird."
210321: ifElse_hr_myCode(3).py - for input: 24 I get correct output: Not Weird but in HackerRank editor it fails and outputs: Weird?
190321: UP TO STEP 10.
190321: I get strange results with test cases. If I:
    a.don't call function, I fail both tests.
    b.call function with both inputs it fails.
    c.call with one input, it passes the one being called and fails the other. (refer to screenshots).
190321: Ran in HackerRank editor. Passed 1/2 test cases. Test case 0 works in[3] out[3]: Weird. Case 1 in[24] out[24]: Weird, should  be Not Weird.
190321: Added new step. UP TO STEP 7 (NEW STEP).
190321: I think I can combine the rules to get required single outputs. Will try this first then assess if I need to draw a diagram.
180321: UP TO STEP 7.
180321: Tried in HackerRank editor. Did not work, wrong answer. Multiple outputs for in[3]. Should only be single output. Ie: out[3]: Weird.
180321: Looked at problem spec again. It might work with multiple outputs. Will try code in HackerRank editor.
170321: ADDED TWO NEW STEPS. NOW UP TO STEP 6 - APPLYING METHOD 2 TO STEP 8.
170321: Need to only have one output based on correct rule. Needs to break out of loop when it meets relevant rule.
170321: Go over problem spec and expected output again. One argument can meet more than one rule.
170321: Refer to failed code 170321 and comments in ifElse_hr_myCode(2).py.
160321: UP TO STEP 6. REFER TO ifElse_hr_myCode(2).py.
160321: Method 1 for step 6 failed. Refer to failed code 160321. Will try method 2. Refer to ifElse_hr_myCode(2).py.
150321: Try two methods to combine functions:
    1.Use main function and call each function in main, and
    2.Put code from all functions into one function.
    SEE WHICH ONE WORKS BETTER. 
150323: Finished step 5. UP TO STEP 6.
130321: Finsihed step 4. UP TO STEP 5.
120321: Finsihed step 3. UP TO STEP 4.
110321: Finished step 2. UP TO STEP 3. Consider putting all code into one function when finished.
100321: WORKING ON STEP 2 - RULE 1 FUNCTION. Refer to line 30.
ISSUE: main(200) gives two outputs: 'invalid input' and 'outside of range' - look into.
invalid(x): constraint 1 <= n <= 100
rule_two(y): if n is even and in the within the range of 2 to 5 print "Not Weird"

FALIED CODE | DESCENDING ORDER

--180321--
TESTED IN HackerRank EDITOR.
DID NOT WORK - WRONG ANSWER.

# step 6 | method 2
import math, os, random, re, sys

def main_combined(a):
    even = a%2

    # invalid input_constraint: 1 <= n <= 100
    # no output if input valid
    if a <= 1 or a >= 100:
        print('Invalid input')
    
    # Rule 1: if n is odd print Weird
    if even != 0:
        print('Weird')
    else:
        print('Even number')

    # 170321: I NEED IT TO BREAK OUT OF FUNCTION IF IT MEETS ONE RULE?
    # 170321: DRAW FLOW CHART.
    # 170321: GO OVER PROBLEM SPEC AND INTENDED OUTPUT AGAIN. 
    # 170321: ONE ARGUMENT CAN MEET MORE THAN ONE RULE.

    # Rule 2: if n is even and in the inlcusive range of 2 to 5 print Not Weird
    if a in range(2,5) and even == 0: # (a%2) == 0: - replaced with even variable
        print('Not Weird')
    else:
        print('Outside of range')

    # Rule 3: if n is even and in the inclusive range of 6 to 20 print Weird
    if a in range(6,20) and even == 0: # (y%2) == 0: - replaced with even variable
        print('Weird')
    else:
        print('Outside of range')

    # Rule 4: if n is even and greater than 20 print Not Weird
    if a > 20 and (a%2) == 0:
        print('Not Weird')
    else:
        print('Number is less than 20 or odd')

main_combined(3) # 160321: DOES NOT WORK AS INTENDED. CHECKS AGAINST EACH RULE AND GIVES RELEVANT OUTPUT - out[3]: Weird
# main_combined(24) # out[24]: Not weird

--170321--
# step 6 | method 2
import math, os, random, re, sys

def main_combined(a):
    even = a%2

    # invalid input_constraint: 1 <= n <= 100
    if a <= 1 or a >= 100:
        print('Invalid input')
    
    '''
    # 170321: REMOVED ELSE STATEMENT SO NO OUTPUT IF VALID.
    else:
        print('Valid')
    '''

    # Rule 1: if n is odd print Weird
    # even = a%2
    if even != 0:
        print('Weird')
    else:
        print('Even number')

    # Rule 2: if n is even and in the inlcusive range of 2 to 5 print Not Weird
    if a in range(2,5) and even == 0: # (a%2) == 0: - replaced with even variable
        print('Not Weird')
    else:
        print('Outside of range')

    # Rule 3: if n is even and in the inclusive range of 6 to 20 print Weird
    if a in range(6,20) and even == 0: # (y%2) == 0: - replaced with even variable
        print('Weird')
    else:
        print('Outside of range')

    # Rule 4: if n is even and greater than 20 print Not Weird
    if a > 20 and (a%2) == 0:
        print('Not Weird')
    else:
        print('Number is less than 20 or odd')

main_combined(3) # 160321: DOES NOT WORK AS INTENDED. CHECKS AGAINST EACH RULE AND GIVES RELEVANT OUTPUT - out[3]: Weird
# main_combined(24) # out[24]: Not weird

--170321--
# step 6 | method 2
import math, os, random, re, sys

def main_combined(a):
    even = a%2

    # invalid input_constraint: 1 <= n <= 100
    if a <= 1 or a >= 100:
        print('Invalid input')
    else:
        print('Valid')

    # Rule 1: if n is odd print Weird
    # even = a%2
    if even != 0:
        print('Weird')
    else:
        print('Even number')

    # Rule 2: if n is even and in the inlcusive range of 2 to 5 print Not Weird
    if a in range(2,5) and even == 0: # (a%2) == 0: - replaced with even variable
        print('Not Weird')
    else:
        print('Outside of range')

    # Rule 3: if n is even and in the inclusive range of 6 to 20 print Weird
    if a in range(6,20) and even == 0: # (y%2) == 0: - replaced with even variable
        print('Weird')
    else:
        print('Outside of range')

    # Rule 4: if n is even and greater than 20 print Not Weird
    if a > 20 and (a%2) == 0:
        print('Not Weird')
    else:
        print('Number is less than 20 or odd')

main_combined(3) # 160321: DOES NOT WORK AS INTENDED. CHECKS AGAINST EACH RULE AND GIVES RELEVANT OUTPUT - out[3]: Weird
# main_combined(24) # out[24]: Not weird

--160321--
# Combine functions into one function
# Method 1: Call each function in main function
def main(n):
    # 160321: i don't think this will work bc the argument will get passed to each function and the operation will be performed accordingly.
    invalid(n)
    rule_one(n)
    rule_two(n)
    rule_three(n)
    rule_four(n)

main(3) # DOES NOT WORK AS INTENDED - out[3]: Weird
# 160321: As above, the argument is processed by each function and relevant output given.
# 160321: Need to make conditional so only one output is given.
# 160321: Will try method 2.

--110321--
def rule_one(w):
    if w != (w%2 == 0):
        print('Weird')
    else:
        print('This is an even number.')

rule_one(6) # works - out[6]: Weird
rule_one(7) # DOES NOT WORK: outputs Weird | SHOULD BE: out[7]: This is an even number.

def rule_one(w):
    if w != (w%2):
        print('Weird')
    else:
        print('This is an even number.')

rule_one(6) # works - out[6]: Weird
rule_one(7) # DOES NOT WORK: outputs Weird | SHOULD BE: out[7]: This is an even number.

--100321--
def rule_one(w):
    if w != w%2:
        print('Weird')
    else:
        print('This is an even number.')

rule_one(6) # works - out[6]: Weird
rule_one(7) # DOES NOT WORK: outputs Weird | SHOULD BE: out[7]: This is an even number.

def rule_one(w):
    even = w%2 == 0
    if w is not != even: # Invalid syntax error
        print('Weird')
    else:
        print('This is an even number.')

rule_one(6) # out[6]: Weird
rule_one(7) # out[7]: This is an even number.

def rule_one(w):
    even = w%2 == 0
    if w is not == even: # Invalid syntax error
        print('Weird')
    else:
        print('This is an even number.')

rule_one(6) # out[6]: Weird
rule_one(7) # out[7]: This is an even number.
